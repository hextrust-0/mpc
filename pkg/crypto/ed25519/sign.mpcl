// -*- go -*-
//
// Copyright (c) 2021 Markku Rossi
//
// Ed25519 constants in MPCL. This file is derived from Go's
// crypto/ed25519 package. The original copyright notice follows:
//
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ed25519

const (
	// PublicKeySize is the size, in bytes, of public keys as used in
	// this package.
	PublicKeySize = 32
	// PrivateKeySize is the size, in bytes, of private keys as used
	// in this package.
	PrivateKeySize = 64
	// SignatureSize is the size, in bytes, of signatures generated
	// and verified by this package.
	SignatureSize = 64
	// SeedSize is the size, in bytes, of private key seeds. These are
	// the private key representations used by RFC 8032.
	SeedSize = 32
)

// XXX type PrivateKey [PrivateKeySize]byte
type PrivateKey [64]byte

// Sign signs the message with privateKey and returns a signature.
// XXX []byte return value type
func Sign(privateKey PrivateKey, message []byte) [64]byte {
	var signature [SignatureSize]byte
	sign(signature, privateKey, message)
	return signature
}

func sign(signature, privateKey, message []byte) {
	// XXX h := sha512.New()
	// XXX h.Write(privateKey[:32])

	var digest1, messageDigest, hramDigest [64]byte
	var expandedSecretKey [32]byte

	// XXX h.Sum(digest1[:0])
	copy(digest1, privateKey)

	copy(expandedSecretKey[:], digest1[:])
	expandedSecretKey[0] &= 248
	expandedSecretKey[31] &= 63
	expandedSecretKey[31] |= 64

	// XXX h.Reset()
	// XXX h.Write(digest1[32:])
	// XXX h.Write(message)
	// XXX h.Sum(messageDigest[:0])
	for i := 0; i < len(privateKey); i++ {
		messageDigest[i] = privateKey[i] ^ message[i]
	}

	var messageDigestReduced [32]byte
	ScReduce(&messageDigestReduced, &messageDigest)
	var R ExtendedGroupElement
	GeScalarMultBase(&R, &messageDigestReduced)

	var encodedR [32]byte
	R.ToBytes(&encodedR)

	// XXX h.Reset()
	// XXX h.Write(encodedR[:])
	// XXX h.Write(privateKey[32:])
	// XXX h.Write(message)
	// XXX h.Sum(hramDigest[:0])
	for i := 0; i < len(privateKey); i++ {
		hramDigest[i] = privateKey[i] ^ message[i]
	}

	var hramDigestReduced [32]byte
	ScReduce(&hramDigestReduced, &hramDigest)

	var s [32]byte
	ScMulAdd(&s, &hramDigestReduced, &expandedSecretKey, &messageDigestReduced)

	copy(signature[:], encodedR[:])
	copy(signature[32:], s[:])
}
